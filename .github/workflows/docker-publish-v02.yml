name: Build, Test, Push and Pull from ACR

on:
  push:
    branches: [ master ]
    paths:
      - 'Dockerfile'   # Solo se activa cuando cambia el Dockerfile
      - 'WebAppj1/**'  # Carpeta del proyecto principal
      - 'WebApp.Tests/**'   # Carpeta del proyecto de pruebas

env:
  SOLUTION_NAME: 'WepApp.sln'  # Nombre de la solución
  TEST_PROJECT: 'WebApp.Tests/WebApp.Tests.csproj'
  DOTNET_VERSION: '3.1.x'  # Usar la versión adecuada para su proyecto
  ACR_IMAGE_NAME: ${{ secrets.ACR_REGISTRY }}/mi-app
  IMAGE_TAG: ${{ github.sha }} 

jobs:
  build-and-test:
    runs-on: ubuntu-20.04
    steps:
      # Obtener código fuente
      - name: Checkout code
        uses: actions/checkout@v4

    # Añade este paso para instalar libssl1.0
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl1.0.0 libicu-dev

      # Version de .Net Core
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: ${{ env.DOTNET_VERSION }}

      # Dependencias
      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_NAME }}

      # Build la solución
      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_NAME }} --configuration Release --no-restore

      # Ejecutar pruebas unitarias
      - name: Run unit tests
        run: dotnet test ${{ env.TEST_PROJECT }} --configuration Release --no-build --verbosity normal


  acr-build-push-pull:
    needs: build-and-test  # Solo se ejecuta si las pruebas pasan
    runs-on: ubuntu-latest
    steps:
      # Obtener código fuente
      - name: Checkout code
        uses: actions/checkout@v4

      # Autenticación con Azure Container Registry
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      # Construir imagen
      - name: Build Docker image
        run: |
          docker build -t ${{ env.ACR_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./WebAppj1

      # Subir a ACR
      - name: Push Docker image
        run: |
          docker push ${{ env.ACR_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Verificación: Extraer imagen
      - name: Pull Docker image
        run: |
          docker pull ${{ env.ACR_IMAGE_NAME }}:${{ env.IMAGE_TAG }}      
