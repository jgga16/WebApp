name: Build, Test, Push and Pull from ACR

on:
  push:
    branches: [ master ]
    paths:
      - 'Dockerfile'          # Solo se activa cuando cambia el Dockerfile
      - 'WebAppj1/**'         # Carpeta del proyecto principal
      - 'WebAppJ1.Tests/**'   # Carpeta del proyecto de pruebas

env:
  SOLUTION_NAME: 'WebApp.sln'                           # Nombre de la soluci√≥n
  TEST_PROJECT: 'WebAppJ1.Tests/WebAppJ1.Tests.csproj'  # Nombre del proyecto Test
  DOTNET_VERSION: '8.0.x'                               # Usar la versi√≥n adecuada para su proyecto
  ACR_IMAGE_NAME: ${{ secrets.ACR_REGISTRY }}/mi-app    # Nombre de la imagen a crear
  IMAGE_TAG: ${{ github.sha }}                          # Nombre del Tag de la imagen a crear

jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    # Define outputs para pasar el porcentaje a otros jobs
    outputs:
      coverage-percentage: ${{ steps.extract-coverage.outputs.percentage }}
    steps:
      # Obtiene el c√≥digo fuente
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache para los paquetes NuGet actions/*
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.nuget/packages
            **/bin
            **/obj
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-


      # Instala la versi√≥n de .Net Core
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: ${{ env.DOTNET_VERSION }}

      # Dependencias Proyecto 1
      - name: Restore dependencies Proyecto 1
        run: dotnet restore ${{ env.TEST_PROJECT }}

        # Build Proyecto 1
      - name: Build Proyecto 1
        run: dotnet build ${{ env.TEST_PROJECT }} --configuration Release --no-restore

      # Dependencias
      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_NAME }}

      # Build la soluci√≥n
      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_NAME }} --configuration Release --no-restore


      - name: Run tests with coverage
        run: |
          dotnet test ${{ env.TEST_PROJECT }} \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --logger trx \
          --results-directory ./TestResults \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:Exclude=\"[WebAppJ1.Tests]*\"


      - name: Generate coverage report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:./TestResults/**/coverage.cobertura.xml \
            -targetdir:./CoverageReport \
            "-reporttypes:Html;Cobertura"  # ¬°Comillas importantes!


      - name: Extract coverage percentage
        id: extract-coverage
        run: |
          # Instala dependencia necesaria para c√°lculos
          sudo apt-get install -y bc
          
          # Extrae el porcentaje de cobertura
          LINE_RATE=$(grep -oP 'line-rate="\K[0-9.]+' ./CoverageReport/Cobertura.xml | head -1)
          PERCENTAGE=$(echo "$LINE_RATE * 100" | bc -l | awk '{printf "%.2f\n", $0}')
          
          # Guarda como output
          echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
          echo "Coverage percentage: $PERCENTAGE%"

      - name: Publish test results
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results
          path: ./TestResults

      - name: Publish coverage report
        uses: actions/upload-artifact@v4
        with:
          name: Coverage-Report
          path: ./CoverageReport


  acr-build-push-pull:
    needs: build-and-test  # Solo se ejecuta si las pruebas pasan
    runs-on: ubuntu-latest
    steps:
      # Obtener c√≥digo fuente
      - name: Checkout code
        uses: actions/checkout@v4

      # Autenticaci√≥n con Azure Container Registry
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      # Construir imagen
      - name: Build Docker image
        run: |
          docker build -t ${{ env.ACR_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./WebAppj1

      # Subir a ACR
      - name: Push Docker image
        run: |
          docker push ${{ env.ACR_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Verificaci√≥n: Extraer imagen
      - name: Pull Docker image
        run: |
          docker pull ${{ env.ACR_IMAGE_NAME }}:${{ env.IMAGE_TAG }}     


  deploy-webapp:
    needs: acr-build-push-pull  # Depende del job de construcci√≥n
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
    
      - name: Update Web App container image
        run: |
          az webapp config container set \
            --name ${{ secrets.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ env.ACR_IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --docker-registry-server-url https://${{ secrets.ACR_REGISTRY }}
          
          # Opcional: Reinicia la aplicaci√≥n para asegurar cambios
          az webapp restart --name ${{ secrets.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}


  # Job para notificaciones de falla
  notify-on-failure:
    if: ${{ failure() }}  # Solo se ejecuta si alg√∫n job anterior falla
    needs: [build-and-test, acr-build-push-pull]  # Depende de ambos jobs
    runs-on: ubuntu-latest
    steps:
      - name: Send failure email via SendGrid
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.sendgrid.net
          server_port: 587
          username: apikey
          password: ${{ secrets.SENDGRID_API_KEY }}
          subject: "üö® Build Failed: ${{ github.repository }}"
          html_body: |
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; border: 1px solid #e1e4e8; border-radius: 6px; padding: 20px;">
            <h2 style="color: #cb2431;">‚ùå Workflow Failed</h2>
        
            <div style="margin-bottom: 15px;">
              <strong>Repository:</strong> ${{ github.repository }}
            </div>
        
            <div style="margin-bottom: 15px;">
              <strong>Branch:</strong> ${{ github.ref }}
            </div>
        
            <div style="margin-bottom: 15px;">
              <strong>Commit:</strong> ${{ github.sha }}
            </div>
        
            <div style="margin-bottom: 15px;">
              <strong>Workflow:</strong> ${{ github.workflow }}
            </div>
        
            <div style="margin-bottom: 20px;">
              <strong>Details:</strong> 
              <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" 
                 style="color: #0366d6; text-decoration: none;">
                View Run Details
              </a>
            </div>
        
            <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
               style="display: inline-block; background-color: #cb2431; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; font-weight: bold;">
              Investigar Error
            </a>
            </div>
          to: ${{ secrets.EMAIL_TO }}
          from: GitHub Actions <${{ secrets.EMAIL_FROM }}>


 # Job de notificaci√≥n para builds exitosos
  notify-ok:
    if: ${{ success() }}
    needs: [build-and-test, acr-build-push-pull, deploy-webapp]  # Depende de ambos jobs
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.sendgrid.net
          server_port: 587
          username: apikey
          password: ${{ secrets.SENDGRID_API_KEY }}
          subject: "‚úÖ Build Success: ${{ github.repository }}"
          html_body: |
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; border: 1px solid #e1e4e8; border-radius: 6px; padding: 20px;">
              <h2 style="color: #2cbe4e;">‚úîÔ∏è Workflow Completed Successfully</h2>
              <p><b>Repository:</b> ${{ github.repository }}</p>
              <p><b>Image:</b> ${{ env.ACR_IMAGE_NAME }}:${{ env.IMAGE_TAG }}</p>
              <p><b>Cobertura:</b> ${{ needs.build-and-test.outputs.coverage-percentage }}%</p>
              <p><b>Details:</b> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Run</a></p>
              <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                 style="display: inline-block; background-color: #2cbe4e; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; font-weight: bold;">
                Ver Detalles
              </a>
            </div>
          to: ${{ secrets.EMAIL_TO }}
          from: GitHub Actions <${{ secrets.EMAIL_FROM }}>

